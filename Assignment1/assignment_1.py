# -*- coding: utf-8 -*-
"""Assignment_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/131FShjk6PyYBaYfH4-EeAD5sa-Ktcjbe

# Count min-sketch

## Alejandro Gonz√°lez

### Dependencies
* Numpy
* Math
"""

import numpy as np
import math

"""### Implementation

#### Requests the user a data stream
Input: Data stream
"""

# Request data stream
S = [str(x) for x in input('Data Stream (elements separated by space): ').split()]

"""Input: Delta and epsilon

These values are necessary to calculate the number of hash functions ***h*** and the depth ***w***.
"""

# Request error probability and error factor and calculate d and w
delta = float(input('Error probability (delta - typically: 0.05 - 0.001): '))
epsilon = float(input('Error factor (epsilon - typically: 0.5 - 0.1): '))

# Depth or number of hash functions
d = int(np.log(1/delta))

# Width
w = int(math.exp(1) / epsilon)

# Count number of unique items in the stream
N = len(np.unique(S))
elements = list(np.unique(S))
elements

"""### Hash matrix and sketch"""

# Create the hash matrix
hash_matrix = np.random.randint(w, size=(N, d))
hash_matrix

sketch = np.zeros((d, w))
sketch

for item in S:
  for h in range(d):
    sketch[h][hash_matrix[elements.index(item)][h]] += 1 
sketch

"""### Count of element
Requests the desired element to be counted
"""

c = input('Frequency of: ')
l = []
for h in range(d):
  l.append(sketch[h][hash_matrix[elements.index(c)][h]])
  
count = str(int(min(l)))
print('The count of ' + c + ' in the stream is: ' + count)